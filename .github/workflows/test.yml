# .github/workflows/test.yml
# 이 GitHub Actions 워크플로우는 main 브랜치로의 푸시 또는 Pull Request가 생기면 자동으로 테스트를 실행합니다.
# 통합 테스트를 위해 PostgreSQL 데이터베이스를 함께 실행합니다.

name: Test

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 실행
  pull_request:
    branches:
      - main # main 브랜치로 향하는 Pull Request가 생성 또는 업데이트될 때 실행

jobs:
  test:
    runs-on: ubuntu-latest # GitHub에서 제공하는 Ubuntu 리눅스 머신에서 실행

    # PostgreSQL 서비스를 Docker 컨테이너로 함께 실행
    services:
      postgres:
        image: postgres:15 # PostgreSQL 15 버전 사용
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432 # 로컬에서 5432 포트를 통해 접근 가능
        options: >- # DB가 준비될 때까지 기다리는 설정 (헬스 체크)
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    # 전체 테스트 환경에서 사용할 공통 환경변수
    env:
      # PostgreSQL 연결 정보 (Prisma가 이 값을 사용하여 DB 접속)
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/testdb

      # API 기본 주소 및 포트 (예: supertest 등에서 사용)
      BASE_URL: http://localhost:3000
      PORT: 3000
      NODE_ENV: test

      # JWT 서명을 위한 시크릿 키 (테스트용 더미 값)
      JWT_SECRET: dummy-secret-key-for-test
      JWT_ACCESS_TOKEN_SECRET: dummy-access-secret
      JWT_REFRESH_TOKEN_SECRET: dummy-refresh-secret

      # AWS 관련 설정 - 실제 AWS 리소스를 사용하는 경우에는 Secrets로 값 주입 필요
      AWS_REGION: ap-northeast-2
      AWS_ACCESS_KEY_ID: dummy-aws-access-key # 실제 키를 넣으면 안 됨
      AWS_SECRET_ACCESS_KEY: dummy-aws-secret-access-key # 실제 키를 넣으면 안 됨
      AWS_S3_BUCKET_NAME: dummy-panda-market-bucket

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # GitHub 저장소의 코드를 가져옴

      - name: Set up Node.js
        uses: actions/setup-node@v3 # Node.js 실행 환경을 설치
        with:
          node-version: "lts/*" # 또는 프로젝트에 필요한 Node.js 버전

      - name: Install dependencies
        run: |
          cd sprint_3
          npm install

      - name: Apply DB Schema
        run: |
          cd sprint_3
          npm run prisma:migrate

      - name: Type Check
        run: |
          cd sprint_3
          npm run typecheck

      - name: Run Tests
        run: |
          cd sprint_3 
          npm run test:ci

      - name: Build project
        run: |
          cd sprint_3
          npm run build

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            cd /home/ec2-user/1-sprint-mission
            git pull origin main 
            npm install
            npm run build
            npm run prisma:deploy 
            pm2 reload your-app-name 
            echo "Deployment successful!"
