// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  nickname     String
  image        String?
  password     String
  refreshToken String?
  provider     String         @default("local")
  providerId   String?        @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  product      Product[]
  article      Article[]
  comment      Comment[]
  like         Like[]
  Notification Notification[]
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  price       Int
  images      String[]
  tags        String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  comment     Comment[]
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    Int
  likes       Like[]
  likeCount   Int          @default(0)
  productTag  ProductTag[]
}

model Article {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  images    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comment   Comment[]
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  likes     Like[]
  likeCount Int       @default(0)
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  articleId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  articleId Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int
  type        String
  referenceId Int
  reference   User     @relation(fields: [referenceId], references: [id], onDelete: Cascade)
  content     String
  isRead      Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductTag {
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  addAt     DateTime @default(now())
  tagId     Int
  tag       Tag      @relation(fields: [tagId], references: [id])

  @@id([productId, tagId])
}

model Tag {
  id         Int          @id @default(autoincrement())
  content    String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  PRODUCTTAG ProductTag[]
}
